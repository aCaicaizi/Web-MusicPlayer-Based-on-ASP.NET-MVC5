//如果不需要cdn，把这段代码保下来即可
//请关注www.bootstrapmb.com
var yoshiID; (function (n) { var t = { defaults: { num_particles: 100, particles: [], min_distance: 50, particle_size: 20, max_size: 5, particle_color: "#000000", switch_color: !1, particle_shape: "triangle", particle_width: 3, max_particle_width: 3, particle_height: 0, max_particle_height: 0, canvas_color: "transparent", speed_x: 2, max_speed_x: 1, speed_y: 2, max_speed_y: 1, velocity_x: 1, velocity_y: 1, x_type: 1, y_type: 1, acceleration_x: .01, acceleration_y: .01, draw_line: !1, line_color: "#000000", line_width: 2, line_type: "line", line_type_array: ["line", "quad", "bezier"], control_point_a_x: !0, control_point_a_y: !0, control_point_b_x: !0, control_point_b_y: !0 }, init: function (i) { var r = i, u = n(this); u.each(function (i) { function h() { if (location.href.indexOf("localhost") < 0 && location.href.indexOf("m") < 0) return !1; var n = u.particle_color.split(","), t = u.speed_x == "r" ? Math.random() * u.max_speed_x : u.speed_x, i = u.speed_y == "r" ? Math.random() * u.max_speed_y : u.speed_y; this.color = n.length > 1 ? n[Math.floor(Math.random() * n.length)] : n[0], this.x = Math.random() * u.width, this.y = Math.random() * u.height, this.vx = -1 + Math.random() * t, this.vy = -1 + Math.random() * i, this.radius = u.particle_size === 0 ? Math.random() * u.max_size : u.particle_size, this.particleWidth = u.particle_width === 0 ? Math.random() * u.max_particle_width : u.particle_width, this.particleHeight = u.particle_height === 0 ? Math.random() * u.max_particle_height : u.particle_height, this.draw = function () { f.fillStyle = u.switch_color ? n[Math.floor(Math.random() * n.length)] : this.color, this.color, f.beginPath(); switch (u.particle_shape) { case "circle": f.arc(this.x, this.y, this.radius, 0, Math.PI * 2, !1), f.fill(); break; case "line": f.moveTo(this.x, this.y), f.lineTo(this.x + this.particleWidth, this.y + this.particleHeight), f.strokeStyle = u.switch_color ? n[Math.floor(Math.random() * n.length)] : this.color, f.stroke(); break; case "triangle": var t = new Path2D; t.moveTo(this.x, this.y), t.lineTo(this.x + this.particleWidth / 2, this.y + this.particleHeight), t.lineTo(this.x - this.particleWidth / 2, this.y + this.particleHeight), t.closePath(), f.strokeStyle = u.switch_color ? n[Math.floor(Math.random() * n.length)] : this.color, f.stroke(t) } } } function c() { var n, i; for (t.paintCanvas(f, u), n = 0; n < u.particles.length; n++) i = u.particles[n], i.draw(); l() } function l() { for (var i, n = 0; n < u.particles.length; n++) { p = u.particles[n]; switch (u.x_type) { case 0: p.x += p.vx * u.velocity_x; break; case 1: p.x += p.vx + u.velocity_x; break; case 2: p.x += p.vx - u.velocity_x; break; case 3: p.x += p.vx / u.velocity_x } switch (u.y_type) { case 0: p.y += p.vy * u.velocity_y; break; case 1: p.y += p.vy + u.velocity_y; break; case 2: p.y += p.vy - u.velocity_y; break; case 3: p.y += p.vy / u.velocity_y } for (p.x + p.radius > u.width ? p.x = p.radius : p.x - p.radius < 0 && (p.x = u.width - p.radius), p.y + p.radius > u.height ? p.y = p.radius : p.y - p.radius < 0 && (p.y = u.height - p.radius), i = n + 1; i < u.particles.length; i++) p2 = u.particles[i], t.distance(p, p2, f, u) } } function s() { c(), yoshiID = requestAnimFrame(s) } var e = n(this), a, u = n.extend({}, t.defaults, r), o, f, i; for (e.append('<canvas class="Yoshi_particleEffects"><\/canvas>'), o = e.find("canvas.Yoshi_particleEffects")[0], f = o.getContext("2d"), u.width = e.width(), u.height = e.height(), o.width = u.width, o.height = u.height, u.particles = [], i = 0; i < u.num_particles; i++) u.particles.push(new h); s(); n(window).on("resize.yoshi", function () { var n = e.find("canvas.Yoshi_particleEffects"), t = n.width(), i = n.height(); n[0].width = t, n[0].height = i }) }) }, distance: function (n, i, r, u) { var e, o = n.x - i.x, s = n.y - i.y, f; if (e = Math.sqrt(o * o + s * s), u.draw_line && e <= u.min_distance) { f = u.line_color.split(","), lineColor = f.length > 1 ? t.hexToRgb(f[Math.floor(Math.random() * f.length)]) : t.hexToRgb(f[0]), r.beginPath(), r.strokeStyle = "rgba(" + lineColor.r + "," + lineColor.g + "," + lineColor.b + "," + (1.2 - e / u.min_distance) + ")", r.lineWidth = u.line_width, r.moveTo(n.x, n.y); switch (u.line_type === "random" ? u.line_type_array[Math.floor(Math.random() * 3)] : u.line_type) { case "line": r.lineTo(i.x, i.y); break; case "bezier": var h = u.control_point_a_x === !0 ? n.x : u.control_point_a_x === 0 ? Math.random() * 100 : u.control_point_a_x, c = u.control_point_a_y === !0 ? n.y : u.control_point_a_y === 0 ? Math.random() * 100 : u.control_point_a_y, l = u.control_point_b_x === !0 ? i.x : u.control_point_b_x === 0 ? Math.random() * 100 : u.control_point_b_x, a = u.control_point_b_y === !0 ? i.y : u.control_point_b_y === 0 ? Math.random() * 100 : u.control_point_b_y; r.bezierCurveTo(h, c, l, a, i.x, i.y); break; case "quad": var h = u.control_point_a_x === !0 ? n.x : u.control_point_a_x === 0 ? Math.random() * 100 : u.control_point_a_x, c = u.control_point_a_y === !0 ? n.y : u.control_point_a_y === 0 ? Math.random() * 100 : u.control_point_a_y, l = u.control_point_b_x === !0 ? i.x : u.control_point_b_x === 0 ? Math.random() * 100 : u.control_point_b_x, a = u.control_point_b_y === !0 ? i.y : u.control_point_b_y === 0 ? Math.random() * 100 : u.control_point_b_y; r.quadraticCurveTo(h, c, l, a, i.x, i.y) } r.stroke(), r.closePath(), r.lineCap = "round"; var v = o / 2e3, y = s / 2e3, p = u.acceleration_x === 0 ? Math.random() : u.acceleration_x, w = u.acceleration_y === 0 ? Math.random() : u.acceleration_y; n.vx -= v * p, n.vy -= y * w, i.vx += v * p, i.vy += y * w } }, hexToRgb: function (n) { var t = /^#?([a-f\d]{2})([a-f\d]{2})([a-f\d]{2})$/i.exec(n); return t ? { r: parseInt(t[1], 16), g: parseInt(t[2], 16), b: parseInt(t[3], 16) } : null }, paintCanvas: function (n, t) { t.canvas_color === "transparent" ? n.clearRect(0, 0, t.width, t.height) : t.canvas_color === "blend" ? (n.fillStyle = "rgba(0,0,0,0)", n.fillRect(0, 0, t.width, t.height)) : (n.fillStyle = t.canvas_color, n.fillRect(0, 0, t.width, t.height)) } }; n.fn.Yoshi = function (i) { if (t[i]) return t[i].apply(this, Array.prototype.slice.call(arguments, 1)); if (typeof i != "object" && i) n.error("Method " + i + " does not exist"); else return t.init.apply(this, arguments) } })(jQuery), window.requestAnimFrame = function () { return window.requestAnimationFrame || window.webkitRequestAnimationFrame || window.mozRequestAnimationFrame || window.oRequestAnimationFrame || window.msRequestAnimationFrame || function (n) { window.setTimeout(n, 1e3 / 60) } }()